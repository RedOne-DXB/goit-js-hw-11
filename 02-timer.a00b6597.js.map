{"version":3,"sources":["js/timer-constructor.js","js/02-timer.js"],"names":["CountdownTimer","constructor","selector","targetDate","daysField","hoursField","minutesField","secondsField","timerId","timeRemain","pad","number","String","padStart","padDays","days","stringDays","length","convertMs","ms","Math","floor","hour","hours","minute","minutes","second","seconds","getTimeRemainMs","targetTime","diffTime","Date","getTime","getTimeRemain","renderCountdown","textContent","startCountdown","clearInterval","setInterval","isTimerOn","refs","date","document","querySelector","startBtn","checkDate","valueAsDate","setHours","currentDate","value","console","log","disabled","addEventListener","timer"],"mappings":";AAA4B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAArB,MAAMA,EACXC,aAAY,SACVC,EADU,WAEVC,EAFU,UAGVC,EAHU,WAIVC,EAJU,aAKVC,EALU,aAMVC,IAEKC,KAAAA,QACAN,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,UAAYA,EACZC,KAAAA,WAAaA,EACbC,KAAAA,aAAeA,EACfC,KAAAA,aAAeA,EACfE,KAAAA,WAGPC,IAAIC,GACKC,OAAAA,OAAOD,GAAQE,SAAS,EAAG,KAGpCC,QAAQC,GACAC,MAAAA,EAAaJ,OAAOG,GACtBC,OAAAA,EAAWC,OAAS,EACf,KAAKP,IAAIK,GAEXC,EAGTE,UAAUC,GAaD,MAAA,CAAEJ,KAPI,KAAKD,QAAQM,KAAKC,MAAMF,EAFzBG,QASGC,MAND,KAAKb,IAAIU,KAAKC,MAAOF,EAHvBG,MADCE,OAUSC,QALN,KAAKf,IAAIU,KAAKC,MAAQF,EAJ1BG,MADCE,KADEE,MAWgBC,QAJf,KAAKjB,IACnBU,KAAKC,MAASF,EANJG,MADCE,KADEE,IADA,OAejBE,kBACQC,MAEAC,EAFa,IAAIC,KAAK,KAAK5B,YAAY6B,WACzB,IAAID,MAAOC,UAE3BF,OAAAA,EAAW,EACN,EAEFA,EAGTG,gBACS,OAAA,KAAKf,UAAU,KAAKU,mBAG7BM,kBACOzB,KAAAA,WAAa,KAAKwB,gBAClB7B,KAAAA,UAAU+B,YAAc,KAAK1B,WAAWM,KACxCV,KAAAA,WAAW8B,YAAc,KAAK1B,WAAWc,MACzCjB,KAAAA,aAAa6B,YAAc,KAAK1B,WAAWgB,QAC3ClB,KAAAA,aAAa4B,YAAc,KAAK1B,WAAWkB,QAGlDS,iBACOF,KAAAA,kBAELG,cAAc,KAAK7B,SACdA,KAAAA,QAAU8B,YAAY,KACrB,GAA0C,IAA1C,KAAKV,gBAAgB,KAAKzB,YAG5B,OAFAkC,cAAc,KAAK7B,cACd+B,KAAAA,WAAY,GAGdL,KAAAA,mBACJ,MAhFqB,QAAA,eAAA;;ACuD5B,aAvDA,IAAA,EAAA,QAAA,uBAEA,MAAMM,EAAO,CACXC,KAAMC,SAASC,cAAc,kBAC7BC,SAAUF,SAASC,cAAc,gBACjC5B,KAAM2B,SAASC,cAAc,eAC7BpB,MAAOmB,SAASC,cAAc,gBAC9BlB,QAASiB,SAASC,cAAc,kBAChChB,QAASe,SAASC,cAAc,mBAelC,IAAIxC,EAIJ,SAAS0C,IACP1C,EAAa,IAAI4B,KAAKS,EAAKC,KAAKK,YAAYC,SAAS,IAE/CC,MAAAA,EAAc,IAAIjB,KAElB,GAACS,EAAKC,KAAKQ,MAKb9C,OAAAA,EAAa6C,EAAc,GAE3BE,QAAQC,IAAI,6BACdX,EAAKC,KAAKQ,MAAQ,UAGpBT,EAAKI,SAASQ,UAAW,GAVnBF,QAAQC,IAAI,0BAXpBX,EAAKI,SAASQ,UAAW,EAGzBZ,EAAKC,KAAKY,iBAAiB,SAAUR,GAqBrC,MAAMS,EAAQ,IAAItD,EAAJ,eAAmB,CAC/BE,SAAU,WACVC,WAAYA,EACZC,UAAWoC,EAAKzB,KAChBV,WAAYmC,EAAKjB,MACjBjB,aAAckC,EAAKf,QACnBlB,aAAciC,EAAKb,UAGrBa,EAAKI,SAASS,iBAAiB,QAAS,KACtCC,EAAMnD,WAAaA,EACnBmD,EAAMlB","file":"02-timer.a00b6597.js","sourceRoot":"../src","sourcesContent":["export class CountdownTimer {\n  constructor({\n    selector,\n    targetDate,\n    daysField,\n    hoursField,\n    minutesField,\n    secondsField,\n  }) {\n    this.timerId;\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.daysField = daysField;\n    this.hoursField = hoursField;\n    this.minutesField = minutesField;\n    this.secondsField = secondsField;\n    this.timeRemain;\n  }\n\n  pad(number) {\n    return String(number).padStart(2, '0');\n  }\n\n  padDays(days) {\n    const stringDays = String(days);\n    if (stringDays.length < 2) {\n      return this.pad(days);\n    }\n    return stringDays;\n  }\n\n  convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = this.padDays(Math.floor(ms / day));\n    const hours = this.pad(Math.floor((ms % day) / hour));\n    const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n    const seconds = this.pad(\n      Math.floor((((ms % day) % hour) % minute) / second),\n    );\n\n    return { days, hours, minutes, seconds };\n  }\n\n  getTimeRemainMs() {\n    const targetTime = new Date(this.targetDate).getTime();\n    const currentTime = new Date().getTime();\n    const diffTime = targetTime - currentTime;\n    if (diffTime < 1) {\n      return 0;\n    }\n    return diffTime;\n  }\n\n  getTimeRemain() {\n    return this.convertMs(this.getTimeRemainMs());\n  }\n\n  renderCountdown() {\n    this.timeRemain = this.getTimeRemain();\n    this.daysField.textContent = this.timeRemain.days;\n    this.hoursField.textContent = this.timeRemain.hours;\n    this.minutesField.textContent = this.timeRemain.minutes;\n    this.secondsField.textContent = this.timeRemain.seconds;\n  }\n\n  startCountdown() {\n    this.renderCountdown();\n\n    clearInterval(this.timerId);\n    this.timerId = setInterval(() => {\n      if (this.getTimeRemainMs(this.targetDate) === 0) {\n        clearInterval(this.timerId);\n        this.isTimerOn = false;\n        return;\n      }\n      this.renderCountdown();\n    }, 1000);\n  }\n}\n\n\n\n\n ","import { CountdownTimer } from './timer-constructor';\n\nconst refs = {\n  date: document.querySelector('#date-selector'),\n  startBtn: document.querySelector('[data-start]'),\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n};\n\n// const errorDateSettingsSweetalert2 = {\n//   text: 'Please choose a date in the future',\n//   toast: true,\n//   position: 'top',\n//   timer: 3000,\n//   timerProgressBar: true,\n//   showConfirmButton: true,\n//   icon: 'warning',\n//   iconColor: 'tomato',\n// };\n\nrefs.startBtn.disabled = true;\nlet targetDate;\n\nrefs.date.addEventListener('change', checkDate);\n\nfunction checkDate() {\n  targetDate = new Date(refs.date.valueAsDate.setHours(0));\n  // console.log(targetDate);\n  const currentDate = new Date();\n\n    if (!refs.date.value) {\n        console.log('Пока ничего не введено');\n    // Swal.fire(errorDateSettingsSweetalert2);\n    return;\n  }\n  if (targetDate - currentDate < 1) {\n    // Swal.fire(errorDateSettingsSweetalert2);\n      console.log('Введи дату в будущем');\n    refs.date.value = '';\n    return;\n  }\n  refs.startBtn.disabled = false;\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: targetDate,\n  daysField: refs.days,\n  hoursField: refs.hours,\n  minutesField: refs.minutes,\n  secondsField: refs.seconds,\n});\n\nrefs.startBtn.addEventListener('click', () => {\n  timer.targetDate = targetDate;\n  timer.startCountdown();\n});"]}