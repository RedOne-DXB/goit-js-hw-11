{"version":3,"sources":["js/02-timer.js"],"names":["refs","dateSelector","document","querySelector","startBtn","daysField","hoursField","minutesField","secondsField","addEventListener","console","log","value","countdownDate","updateClockface","days","hours","minutes","seconds","textContent","timer","start","setAttribute","Timer","constructor","onTick","intervalId","startTime","Date","now","setInterval","currentTime","deltaTime","convertMs","ms","pad","Math","floor","hour","minute","second","String","padStart"],"mappings":";AAAA,MAAMA,EAAO,CACTC,aAAcC,SAASC,cAAc,kBACrCC,SAAUF,SAASC,cAAc,gBACjCE,UAAWH,SAASC,cAAc,eAClCG,WAAYJ,SAASC,cAAc,gBACnCI,aAAcL,SAASC,cAAc,kBACrCK,aAAcN,SAASC,cAAc,mBAGzCH,EAAKC,aAAaQ,iBAAiB,QAAS,KACxCC,QAAQC,IAAIX,EAAKC,aAAaW,SAGlC,MAAMC,EAAgBb,EAAKC,aAAaW,MASxC,SAASE,GAAgB,KAAEC,EAAF,MAAQC,EAAR,QAAeC,EAAf,QAAwBC,IAC7ClB,EAAKK,UAAUc,eAAiBJ,IAChCf,EAAKM,WAAWa,eAAiBH,IACjChB,EAAKO,aAAaY,eAAiBF,IACnCjB,EAAKQ,aAAaW,eAAiBD,IAZvCR,QAAQC,IAAIE,GAGZb,EAAKI,SAASK,iBAAiB,QAAS,KACpCW,EAAMC,QACLrB,EAAKI,SAASkB,aAAa,YAAY,KAU5C,MAAMC,EACFC,aAAY,OAACC,IACJC,KAAAA,WAAa,KACbD,KAAAA,OAASA,EAGdJ,QACMM,MAAAA,EAAYC,KAAKC,MAEnBH,KAAAA,WAAaI,YAAY,KACnBC,MACAC,EADcJ,KAAKC,MACOF,EAGjCb,EAFwB,KAAKmB,UAAUD,KAGvC,KAGPC,UAAUC,GAgBL,MAAA,CAAEnB,KARI,KAAKoB,IAAIC,KAAKC,MAAMH,EAHrBI,QAWGtB,MAND,KAAKmB,IAAIC,KAAKC,MAAOH,EALvBI,MADCC,OAYStB,QAJN,KAAKkB,IAAIC,KAAKC,MAAQH,EAP1BI,MADCC,KADEC,MAagBtB,QAFf,KAAKiB,IAAIC,KAAKC,MAASH,EAT3BI,MADCC,KADEC,IADA,OAiBjBL,IAAIvB,GACO6B,OAAAA,OAAO7B,GAAO8B,SAAS,EAAG,MAIrC,MAAMtB,EAAQ,IAAIG,EAAM,CACpBE,OAAQX","file":"02-timer.b41baa02.js","sourceRoot":"../src","sourcesContent":["const refs = {\n    dateSelector: document.querySelector('#date-selector'),\n    startBtn: document.querySelector('[data-start]'),\n    daysField: document.querySelector('[data-days]'),\n    hoursField: document.querySelector('[data-hours]'),\n    minutesField: document.querySelector('[data-minutes]'),\n    secondsField: document.querySelector('[data-seconds]'),\n}\n\nrefs.dateSelector.addEventListener('input', () => {\n    console.log(refs.dateSelector.value)\n})\n\nconst countdownDate = refs.dateSelector.value;\nconsole.log(countdownDate);\n\n\nrefs.startBtn.addEventListener('click', () => {\n    timer.start();\n     refs.startBtn.setAttribute('disabled', true);\n});\n\nfunction updateClockface({ days, hours, minutes, seconds }) {\n    refs.daysField.textContent = `${days}`;\n    refs.hoursField.textContent = `${hours}`;\n    refs.minutesField.textContent = `${minutes}`;\n    refs.secondsField.textContent = `${seconds}`;\n}\n\nclass Timer {\n    constructor({onTick}) {\n        this.intervalId = null;\n        this.onTick = onTick;\n    }\n\n        start() {\n        const startTime = Date.now();\n\n       this.intervalId = setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = currentTime - startTime;\n            const timeConversion = this.convertMs(deltaTime);\n\n           updateClockface(timeConversion);\n        }, 1000);\n    }\n\n    convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = this.pad(Math.floor(ms / day));\n  // Remaining hours\n  const hours = this.pad(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n}\n\npad(value) {\n    return String(value).padStart(2, '0');\n}\n}\n\nconst timer = new Timer({\n    onTick: updateClockface,\n});\n\n"]}