{"version":3,"sources":["js/timer-constructor.js","js/02-timer.js"],"names":["CoundtownTimer","constructor","targetDate","daysField","hoursField","minutesField","secondsField","intervalId","onTick","remainingTime","start","updateClockface","clearInterval","setInterval","getRemainingMs","isTimerOn","convertMs","ms","days","pad","Math","floor","hour","hours","minute","minutes","second","seconds","targetTime","diffTime","Date","getTime","getRemainingTime","textContent","value","String","padStart","refs","dateSelector","document","querySelector","startBtn","getDateFromInput","date","valueAsDate","setHours","currentDate","inputDateValue","console","log","setAttribute","addEventListener","timer"],"mappings":";AAA4B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAArB,MAAMA,EACTC,aAAY,WACZC,EADY,UAEZC,EAFY,WAGZC,EAHY,aAIZC,EAJY,aAKZC,IAESC,KAAAA,WAAa,KACbC,KAAAA,OAASA,OACTN,KAAAA,WAAaA,EACbC,KAAAA,UAAYA,EAChBC,KAAAA,WAAaA,EACbC,KAAAA,aAAeA,EACXC,KAAAA,aAAeA,EACfG,KAAAA,cAGLC,QACSC,KAAAA,kBAELC,cAAc,KAAKL,YAEnBA,KAAAA,WAAaM,YAAY,KACrB,GAAyC,IAAzC,KAAKC,eAAe,KAAKZ,YAGjC,OAFAU,cAAc,KAAKL,iBACdQ,KAAAA,WAAY,GAGdJ,KAAAA,mBACJ,KAGHK,UAAUC,GAgBL,MAAA,CAAEC,KARI,KAAKC,IAAIC,KAAKC,MAAMJ,EAHrBK,QAWGC,MAND,KAAKJ,IAAIC,KAAKC,MAAOJ,EALvBK,MADCE,OAYSC,QAJN,KAAKN,IAAIC,KAAKC,MAAQJ,EAP1BK,MADCE,KADEE,MAagBC,QAFf,KAAKR,IAAIC,KAAKC,MAASJ,EAT3BK,MADCE,KADEE,IADA,OAiBbZ,iBACMc,MAEAC,EAFa,IAAIC,KAAK,KAAK5B,YAAY6B,WACzB,IAAID,MAAOC,UAE3BF,OAAAA,EAAW,EACN,EAEFA,EAGPG,mBACO,OAAA,KAAKhB,UAAU,KAAKF,kBAG3BH,iBAAgB,KAAEO,EAAF,MAAQK,EAAR,QAAeE,EAAf,QAAwBE,IAC/BlB,KAAAA,cAAgB,KAAKuB,mBACzB7B,KAAAA,UAAU8B,eAAiBf,IAC3Bd,KAAAA,WAAW6B,eAAiBV,IAC5BlB,KAAAA,aAAa4B,eAAiBR,IAC9BnB,KAAAA,aAAa2B,eAAiBN,IAGvCR,IAAIe,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MA3ET,QAAA,eAAA;;ACwC5B,aAxCA,IAAA,EAAA,QAAA,uBAEA,MAAMC,EAAO,CACTC,aAAcC,SAASC,cAAc,kBACrCC,SAAUF,SAASC,cAAc,gBACjCrC,UAAWoC,SAASC,cAAc,eAClCpC,WAAYmC,SAASC,cAAc,gBACnCnC,aAAckC,SAASC,cAAc,kBACrClC,aAAciC,SAASC,cAAc,mBAIzC,IAAItC,EAEJ,SAASwC,IACNxC,EAAa,IAAI4B,KAAKO,EAAKM,KAAKC,YAAYC,SAAS,IAC9CC,MAAAA,EAAc,IAAIhB,KAEpB,GAACO,EAAKC,aAAaJ,MAKnBa,OAAAA,eAAiBD,EAAc,GAC/BE,QAAQC,IAAI,qCACZZ,EAAKC,aAAaJ,MAAQ,UAG7BG,EAAKI,SAASS,aAAa,YAAY,GATpCF,QAAQC,IAAI,qBARpBZ,EAAKC,aAAaa,iBAAiB,SAAUT,GAoB7CL,EAAKI,SAASU,iBAAiB,QAAS,KACpCC,EAAMlD,WAAaA,EACnBkD,EAAM1C,QACL2B,EAAKI,SAASS,aAAa,YAAY,KAM5C,MAAME,EAAQ,IAAIpD,eAAgB,CAC9BE,WAAYA,EACZC,UAAWkC,EAAKlC,UAClBC,WAAYiC,EAAKjC,WACjBC,aAAcgC,EAAKhC,aACnBC,aAAc+B,EAAK/B","file":"02-timer.29047bde.js","sourceRoot":"../src","sourcesContent":["export class CoundtownTimer {\n    constructor({\n    targetDate,\n    daysField,\n    hoursField,\n    minutesField,\n    secondsField,})\n    {\n        this.intervalId = null;\n        this.onTick = onTick;\n        this.targetDate = targetDate;\n        this.daysField = daysField;\n    this.hoursField = hoursField;\n    this.minutesField = minutesField;\n        this.secondsField = secondsField;\n        this.remainingTime;\n    }\n\n        start() {\n            this.updateClockface();\n\n            clearInterval(this.intervalId);\n\n       this.intervalId = setInterval(() => {\n            if (this.getRemainingMs(this.targetDate) === 0) {\n        clearInterval(this.intervalId);\n        this.isTimerOn = false;\n        return;\n      }\n      this.updateClockface();\n    }, 1000);\n  }\n\n    convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = this.pad(Math.floor(ms / day));\n  // Remaining hours\n  const hours = this.pad(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n    }\n    \n    getRemainingMs() {\n    const targetTime = new Date(this.targetDate).getTime();\n    const currentTime = new Date().getTime();\n    const diffTime = targetTime - currentTime;\n    if (diffTime < 1) {\n      return 0;\n    }\n    return diffTime;\n    }\n\n    getRemainingTime() {\n    return this.convertMs(this.getRemainingMs());\n    }\n    \n    updateClockface({ days, hours, minutes, seconds }) {\n        this.remainingTime = this.getRemainingTime();\n    this.daysField.textContent = `${days}`;\n    this.hoursField.textContent = `${hours}`;\n    this.minutesField.textContent = `${minutes}`;\n    this.secondsField.textContent = `${seconds}`;\n}\n\npad(value) {\n    return String(value).padStart(2, '0');\n}\n}","import {CountdownTimer} from './timer-constructor'\n\nconst refs = {\n    dateSelector: document.querySelector('#date-selector'),\n    startBtn: document.querySelector('[data-start]'),\n    daysField: document.querySelector('[data-days]'),\n    hoursField: document.querySelector('[data-hours]'),\n    minutesField: document.querySelector('[data-minutes]'),\n    secondsField: document.querySelector('[data-seconds]'),\n}\n\nrefs.dateSelector.addEventListener('change', getDateFromInput);\nlet targetDate;\n\nfunction getDateFromInput () {\n   targetDate = new Date(refs.date.valueAsDate.setHours(0));\n    const currentDate = new Date();\n\n    if (!refs.dateSelector.value) {\n        console.log('Здесь пока пусто!');\n        return;\n    }\n\n    if (inputDateValue - currentDate < 1) {\n        console.log('Здесь будет всплывать ошибка');\n        refs.dateSelector.value = '';\n        return;\n    }\n     refs.startBtn.setAttribute('disabled', false);\n}\n\nrefs.startBtn.addEventListener('click', () => {\n    timer.targetDate = targetDate;\n    timer.start();\n     refs.startBtn.setAttribute('disabled', true);\n});\n\n\n\n\nconst timer = new CoundtownTimer ({\n    targetDate: targetDate,\n    daysField: refs.daysField,\n  hoursField: refs.hoursField,\n  minutesField: refs.minutesField,\n  secondsField: refs.secondsField,\n});\n\n\n\n"]}